

@mixin vertical-center(){
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}


@mixin horizontal-center(){
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}
@mixin stretch(){
    position: absolute;
    left: 0;
    width: 100%;
    top: 0;
    height: 100%;
}

@mixin align-center(){
    display: flex;
    align-items: center;
}

@mixin center(){
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
@mixin triangle($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $width: $width / 2;
  $height: if(length($size) > 1, $height, $height/2);

  @if $direction == up {
      border-bottom: $height solid $color;
      border-left: $width solid transparent;
      border-right: $width solid transparent;

  } @else if $direction == right {
      border-left: $height solid $color;
      border-bottom: $width solid transparent;
      border-top: $width solid transparent;

  } @else if $direction == down {
      border-top: $height solid $color;
      border-left: $width solid transparent;
      border-right: $width solid transparent;

  } @else if $direction == left {
      border-right: $height solid $color;
      border-bottom: $width solid transparent;
      border-top: $width solid transparent;
  }
}

@mixin size($size){
    width: rem-calc($size);
    height: rem-calc($size);
}


@mixin spacer($prop,$direction, $size ) {
    //#{$prop}: $size !important;
    @if (index((left, right, top, bottom),$direction)) {
      #{$prop}-#{$direction}: rem-calc($size*$spacer-mobile);
      @include breakpoint(medium) {
        #{$prop}-#{$direction}: rem-calc($size*$spacer);
      }
    }@else if (index((y,x),$direction)) {
      @if ($direction == x){
        #{$prop}-left: rem-calc($size*$spacer-mobile);
        #{$prop}-right: rem-calc($size*$spacer-mobile);
        @include breakpoint(medium) {
          #{$prop}-left: rem-calc($size*$spacer);
          #{$prop}-right: rem-calc($size*$spacer);
        }
      }@else{
        #{$prop}-top: rem-calc($size*$spacer-mobile);
        #{$prop}-bottom: rem-calc($size*$spacer-mobile);
        @include breakpoint(medium) {
          #{$prop}-top: rem-calc($size*$spacer);
          #{$prop}-bottom: rem-calc($size*$spacer);
        }
      }
    }@else{
      #{$prop}: rem-calc($size*$spacer-mobile);
      @include breakpoint(large) {
        #{$prop}: rem-calc($size*$spacer);
      }
    }

  }

  @mixin font-scale-mobile($size,$min: 0){
    @include breakpoint(small only){
      $mobile-font-size: $font-scale-mobile*$size;
      @if ($min > $mobile-font-size) {
        $mobile-font-size: $min;
      }
      font-size: rem-calc($mobile-font-size);
    }
  }
