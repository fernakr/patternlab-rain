

@mixin vertical-center(){
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}


@mixin dropdown(){
  $arrow-size-horizontal: 40;
  $arrow-size-vertical: 24;
  background-repeat: no-repeat;
  background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='#{$arrow-size-horizontal}' height='#{$arrow-size-vertical}' viewBox='0 0 #{$arrow-size-horizontal} #{$arrow-size-vertical}'><polygon points='0,0 #{$arrow-size-horizontal},0 #{$arrow-size-horizontal/2},#{$arrow-size-vertical}' style='fill: rgb%2851, 51, 51%29'></polygon></svg>");
  background-size: 9px;
  background-position: right rem-calc(-17) center;
  @include spacer(padding,right,4,4);
}



@mixin horizontal-center(){
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}
@mixin stretch(){
    position: absolute;
    left: 0;
    width: 100%;
    top: 0;
    height: 100%;
}

@mixin align-center(){
    display: flex;
    align-items: center;
}

@mixin center(){
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
@mixin triangle($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $width: $width / 2;
  $height: if(length($size) > 1, $height, $height/2);

  @if $direction == up {
      border-bottom: $height solid $color;
      border-left: $width solid transparent;
      border-right: $width solid transparent;

  } @else if $direction == right {
      border-left: $height solid $color;
      border-bottom: $width solid transparent;
      border-top: $width solid transparent;

  } @else if $direction == down {
      border-top: $height solid $color;
      border-left: $width solid transparent;
      border-right: $width solid transparent;

  } @else if $direction == left {
      border-right: $height solid $color;
      border-bottom: $width solid transparent;
      border-top: $width solid transparent;
  }
}

@mixin size($size){
    width: rem-calc($size);
    height: rem-calc($size);
}


@mixin spacer($prop,$direction,$size,$mobile-override: false, $important: null){
    #{$prop}: $size !important;
    $mobile-spacer: $size*$spacer-mobile;
    @if ($mobile-override){
      $mobile-spacer: $mobile-override * $spacer;
    }
    $desktop-spacer: $size*$spacer;
    @if (index((left, right, top, bottom),$direction)) {
      #{$prop}-#{$direction}: rem-calc($mobile-spacer)   $important;
      @include media-breakpoint-up(md) {
        #{$prop}-#{$direction}: rem-calc($desktop-spacer)   $important;
      }
    }@else if (index((y,x),$direction)) {
      @if ($direction == x){
        #{$prop}-left: rem-calc($mobile-spacer)   $important;
        #{$prop}-right: rem-calc($mobile-spacer)   $important;
        @include media-breakpoint-up(md) {
          #{$prop}-left: rem-calc($desktop-spacer)   $important;
          #{$prop}-right: rem-calc($desktop-spacer)   $important;
        }
      }@else{
        #{$prop}-top: rem-calc($mobile-spacer)   $important;
        #{$prop}-bottom: rem-calc($mobile-spacer)   $important;
        @include media-breakpoint-up(md) {
          #{$prop}-top: rem-calc($desktop-spacer)   $important;
          #{$prop}-bottom: rem-calc($desktop-spacer)   $important;
        }
      }
    }@else{
      #{$prop}: rem-calc($mobile-spacer)   $important;
      @include media-breakpoint-up(lg) {
        #{$prop}: rem-calc($desktop-spacer)   $important;
      }
    }

  }

  @mixin font-scale-mobile($font-size,$min: 0,$output-desktop: false){
    @if ($output-desktop) {
      font-size: rem-calc($font-size);
    }
    @include media-breakpoint-only(sm){
      $font-size-mobile: $font-size*$font-scale-mobile;
      @if ($min > $font-size-mobile){
        $font-size-mobile: $min;
      }
      font-size: rem-calc($font-size-mobile);
    }
  }

  .has-icon{
    display: inline-flex;
    .icon{
      vertical-align: middle;
      margin-right: rem-calc(7);
      flex: none;
    }
    &:not(.align-middle){
      align-items: flex-start;
      justify-content: flex-start;
      .icon{
        margin-top: rem-calc(2);
      }
    }
  }

  @mixin icon-circle(){
    background-color: $primary !important;
    width: rem-calc(30) !important;
    height: rem-calc(30) !important;
    color: $white;
    border-radius: 100% !important;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    padding: rem-calc(3) !important;
    &:hover, &:focus{
      color: $white;
      background-color: $secondary;
    }

    svg{
      g, path{
        fill: $white;
      }
    }


    .text-white & {
      background-color: $white !important;
      mix-blend-mode: lighten;
      svg{
        g, path{
          fill: black;
        }
      }
      [class*=icon-]{
        color: black;
      }
      &:hover, &:focus{
        background-color: map-get($additional-palette,'primary-lightest') !important;
      }
    }

    [class*=icon-]{
      position: absolute;
    }
    &.a2a_s_facebook{
      svg{
        margin-bottom: rem-calc(-8.25%);
        margin-left: rem-calc(-4%);
        width: 130%;
      }
    }
    .icon-facebook{
      font-size: 1.3em;
      position: absolute;
      //margin-top: rem-calc(-8%);
      margin-bottom: rem-calc(-8.25%);
      margin-right: rem-calc(-2%);
    }
  }
