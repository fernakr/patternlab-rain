<style>
	.spacer {
		background: aqua;
		border: 1px solid #000;
	}
  code.highlighter-rouge{
    background: transparent;
    border: 0;
    color: #e83e8c;
  }
</style>


<div class="container">
	<h2>How it works</h2>
	<p>Assign responsive-friendly&nbsp;<code class="highlighter-rouge">margin</code>&nbsp;or&nbsp;<code class="highlighter-rouge">padding</code>&nbsp;values to an element or a subset of its sides with shorthand classes. Includes support for individual properties, all properties, and vertical and horizontal properties. </p>
  
  <p>Classes are built from a range of 0 to {{ range }}, with some additional half steps: {% for key, value in additional %}{{ key }} ({{ value }}){{ loop.last == false ? ', ': '' }}{% endfor %}.</p>
	<h2>Notation</h2>
	<p>Spacing utilities that apply to all breakpoints, from&nbsp;<code class="highlighter-rouge">small</code>&nbsp;to&nbsp;<code class="highlighter-rouge">xlarge</code>, have no breakpoint abbreviation in them. This is because those classes are applied from&nbsp;<code class="highlighter-rouge">min-width: 0</code>&nbsp;and up, and thus are not bound by a media query. The remaining breakpoints, however, do include a breakpoint abbreviation.</p>
	<p>The classes are named using the format&nbsp;<code class="highlighter-rouge">{property}{sides}-{size}</code>&nbsp;for&nbsp;<code class="highlighter-rouge">xs</code>&nbsp;and&nbsp;<code class="highlighter-rouge">{breakpoint}-{property}{sides}-{size}</code>&nbsp;for&nbsp;<code class="highlighter-rouge">medium</code>,&nbsp;<code class="highlighter-rouge">large</code>,&nbsp;<code class="highlighter-rouge">xlarge</code>.</p>
	<p>Where&nbsp;<em>property</em>&nbsp;is one of:</p>
	<ul>
		<li>
			<code class="highlighter-rouge">m</code>&nbsp;- for classes that set&nbsp;<code class="highlighter-rouge">margin</code>
		</li>
		<li>
			<code class="highlighter-rouge">p</code>&nbsp;- for classes that set&nbsp;<code class="highlighter-rouge">padding</code>
		</li>
	</ul>
	<p>Where&nbsp;<em>sides</em>&nbsp;is one of:</p>
	<ul>
		<li>
			<code class="highlighter-rouge">t</code>&nbsp;- for classes that set&nbsp;<code class="highlighter-rouge">margin-top</code>&nbsp;or&nbsp;<code class="highlighter-rouge">padding-top</code>
		</li>
		<li>
			<code class="highlighter-rouge">b</code>&nbsp;- for classes that set&nbsp;<code class="highlighter-rouge">margin-bottom</code>&nbsp;or&nbsp;<code class="highlighter-rouge">padding-bottom</code>
		</li>
		<li>
			<code class="highlighter-rouge">l</code>&nbsp;- for classes that set&nbsp;<code class="highlighter-rouge">margin-left</code>&nbsp;or&nbsp;<code class="highlighter-rouge">padding-left</code>
		</li>
		<li>
			<code class="highlighter-rouge">r</code>&nbsp;- for classes that set&nbsp;<code class="highlighter-rouge">margin-right</code>&nbsp;or&nbsp;<code class="highlighter-rouge">padding-right</code>
		</li>
		<li>
			<code class="highlighter-rouge">x</code>&nbsp;- for classes that set both&nbsp;<code class="highlighter-rouge">*-left</code>&nbsp;and&nbsp;<code class="highlighter-rouge">*-right</code>
		</li>
		<li>
			<code class="highlighter-rouge">y</code>&nbsp;- for classes that set both&nbsp;<code class="highlighter-rouge">*-top</code>&nbsp;and&nbsp;<code class="highlighter-rouge">*-bottom</code>
		</li>
		<li>blank - for classes that set a&nbsp;<code class="highlighter-rouge">margin</code>&nbsp;or&nbsp;<code class="highlighter-rouge">padding</code>&nbsp;on all 4 sides of the element</li>
	</ul>
	<p>Where&nbsp;<em>size</em>&nbsp;is one of:</p>
	<ul>
    {% for spacer in spacers %}
		<li>
			<code class="highlighter-rouge">{{ spacer.key }}</code>&nbsp;- for classes that set the&nbsp;<code class="highlighter-rouge">margin</code>&nbsp;or&nbsp;<code class="highlighter-rouge">padding</code>&nbsp; to&nbsp;<code class="highlighter-rouge">$spacer * {{ spacer.value }}</code>
		</li>
		{% endfor %}
		<li>
			<code class="highlighter-rouge">auto</code>&nbsp;- for classes that set the&nbsp;<code class="highlighter-rouge">margin</code>&nbsp;to auto</li>
	</ul>
	
	<h2>Horizontal centering</h2>
	<p>Additionally, also includes an&nbsp;<code class="highlighter-rouge">.mx-auto</code>&nbsp;class for horizontally centering fixed-width block level content&mdash;that is, content that has&nbsp;<code class="highlighter-rouge">display: block</code>&nbsp;and a&nbsp;<code class="highlighter-rouge">width</code>&nbsp;set&mdash;by setting the horizontal margins to&nbsp;<code class="highlighter-rouge">auto</code>.</p>
	<div class="bd-example">&nbsp;</div>

  <h2>Examples</h2>
	{% set types = [
  {
    label: "Margin",
    selector: "m",
    negative: true,
    directions: true
  },
  {
    label: "Padding",
    selector: "p",
    directions: true
  },
  {
    label: "Gap",
    selector: "g",
    description: "Gap between flex child elements (either in a row or column)",
    directions: false,
    multiple: 4
  }
] %}

	{% set sections = types %}

	<ul>
		{% for section in sections %}
			<li>
				<a href="#{{ section.selector }}">{{ section.label }}</a>
			</li>
		{% endfor %}
	</ul>

	{% set directions = [
  {
    label: "All",
    selector: ""
  },
  {
    label: "Top",
    selector: "t"
  },
  {
    label: "Bottom",
    selector: "b"
  },
  {
    label: "Left",
    selector: "l"
  },
  {
    label: "Right",
    selector: "r"
  },
  {
    label: "Horizontal / X",
    selector: "x"
  },
  {
    label: "Vertical / Y",
    selector: "y"
  }
] %}

	
	
	<p>Spacer range is defined in
		<code>global/base/styles.json</code><br/>
		Additional spacers can be added there as well. Spacing system uses 8px increments.
	</p>

  

	{% for type in types %}
		<h3 id="{{ type.selector }}">{{ type.label }}</h3>
		{% if type.description %}
			<p>{{ type.description }}</p>
		{% endif %}
		{% if type.directions %}
			{% if type.negative %}
				<p>{{ type.label }}
					can also have negative spacers by adding n to the # e.g.
					{{ type.selector }}t-n1
				</p>
			{% endif %}

			{% for direction in directions %}
				<h4>{{ type.label }}
					{{ direction.label }}
					{% if forward == 'negative' %}(Negative)
					{% endif %}
				</h4>
				<div style="background-color: orange; overflow: scroll; height: 300px;">
					{% for spacer in spacers %}
						<div class="spacer {{ type.selector }}{{ direction.selector }}-{{ spacer.key }}">
							<span class="d-block" style="background-color: #ccc">{{ type.label }}
								{{ direction.label }}
								{{ spacer.key }}
								(<code>{{ type.selector }}{{ direction.selector }}-{{ spacer.key }}</code>)</span>
						</div>
					{% endfor %}
				</div>
				<hr/>
			{% endfor %}

		{% else %}

			<div style="background-color: orange; overflow: scroll;  height: 300px;">
				{% set directions = ['col','row'] %}


				{% for direction in directions %}
					{% for spacer in spacers %}
						<div class="spacer {% if type.multiple %}flex{% endif %} {% if direction == 'col' %}flex-col{% endif %} {{ type.selector }}-{{ spacer.key }}">
							{% if type.multiple %}
								{% for i in range (1, type.multiple) %}
									<div class="spacer {{ type.selector }}-{{ spacer.key }}">
										<span class="d-block" style="background-color: #ccc">{{ type.label }}
											{{ spacer.key }}
											(<code>{{ type.selector }}-{{ spacer.key }}</code>)</span>
									</div>
								{% endfor %}
							{% else %}
								<span class="d-block" style="background-color: #ccc">{{ type.label }}
									{{ spacer.key }}
									(<code>{{ type.selector }}-{{ spacer.key }}</code>)</span>
							{% endif %}

						</div>
					{% endfor %}
				{% endfor %}

			</div>
		{% endif %}

	{% endfor %}
	<hr>
	<h4>Row Gap or Col Gap
		<code>g-y-# / gap-x-#</code>
	</h4>

  <h5>Row Gap <code>g-y-#</code></h5>
  <div class="flex gap-y-1 mb-4 flex-col">
    {% for i in 1..5 %}
      <div class="spacer gap-x-1 flex flex-justify-center px-2" style="background-color: #ccc; height: 10px; width-8"></div>
    {% endfor %}
  </div>

  <h5>Col Gap <code>gap-x-#</code></h5>
  <div class="flex gap-x-3 mb-4">
    {% for i in 1..5 %}
      <div class="spacer gap-x-1 flex flex-justify-center px-2" style="background-color: #ccc; height: 200px; width-8"></div>
    {% endfor %}
  </div>
	
	<h3>Custom grid columns can be created using a combination of padding on the  and negative margin on the row div</h3>
  <div class="grid gap-y-2 mx-n1">
    {% for i in 1..5 %}
      <div class=" md:col-span-6 lg:col-span-4 px-1">
        <span class="d-block" style="border: 1px solid #000;background-color: #ccc; height: 200px;"><code>px-1</code></span>
      </div>
    {% endfor %}

  </div>


	<hr>

	<h3>Misaneous Spacers</h3>

	{% set other_types = [
  {
    label: 'Auto Horizontal Margin',
    selector: 'm-auto'
  },
  {
    label: '100% Width',
    selector: 'w-full'
  },{
    label: '100% Height',
    selector: 'h-full'
  }
] %}
	<div style="background-color: orange; overflow: hidden;">
		{% for type in other_types %}
			<span class="spacer d-block {{ type.selector }}" style="{% if type.selector == 'm-auto' %}width: 300px;{% endif %}background-color: #ccc">{{ type.label }}
				(<code>{{ type.selector }}</code>)</span>
		{% endfor %}
	</div>


</div>
